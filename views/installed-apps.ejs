<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Garapin Cloud - Installed Apps</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/css/style.css">
    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-auth-compat.js"></script>
</head>
<body>
    <div class="container-fluid" data-firebase-config='<%= JSON.stringify(firebaseConfig) %>'>
        <div class="row">
            <%- include('partials/sidebar', {currentPage: 'installed-apps'}) %>

            <!-- Main content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 bg-light">
                <%- include('partials/header', {
                    pageTitle: 'Installed Apps',
                    currentPage: 'installed-apps'
                }) %>

                <!-- Search Bar -->
                <div class="row mb-2">
                    <div class="col-12">
                        <input type="text" class="form-control" placeholder="Search installed applications..." id="searchInstalledApps">
                    </div>
                </div>

                <!-- Applications Grid -->
                <div class="row g-3">
                    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 g-4">
                        <% if (applications && applications.length > 0) { %>
                            <% applications.forEach(installed => { %>
                                <% const app = installed.application_id %>
                                <% if (app) { %>
                                    <div class="col">
                                        <div class="card h-100" data-app-id="<%= app._id %>" data-installed-id="<%= installed._id %>">
                                            <% if (app.logo && app.logo.url) { %>
                                                <a href="/store/app/<%= app._id %>" class="text-decoration-none">
                                                    <img src="<%= app.logo.url %>" class="card-img-top p-3" alt="<%= app.title %>" style="height: 200px; object-fit: contain;">
                                                </a>
                                            <% } else { %>
                                                <a href="/store/app/<%= app._id %>" class="text-decoration-none">
                                                    <div class="card-img-top bg-light d-flex align-items-center justify-content-center" style="height: 200px;">
                                                        <i class="bi bi-box fs-1"></i>
                                                    </div>
                                                </a>
                                            <% } %>
                                            <div class="card-body">
                                                <h5 class="card-title">
                                                    <a href="/store/app/<%= app._id %>" class="text-decoration-none text-dark">
                                                        <%= app.title %>
                                                    </a>
                                                </h5>
                                                <div class="d-flex align-items-center mb-2">
                                                    <div class="text-warning me-2">
                                                        <% const rating = typeof app.rating === 'number' ? app.rating : 0; %>
                                                        <% for(let i = 1; i <= 5; i++) { %>
                                                            <i class="bi bi-star<%= rating >= i ? '-fill' : (rating > i-1 ? '-half' : '') %>"></i>
                                                        <% } %>
                                                    </div>
                                                    <small class="text-muted">(<%= app.installed_count || 0 %> installs)</small>
                                                </div>
                                                <p class="card-text text-muted">
                                                    <%- cleanAndTruncateDescription(app.description) %>
                                                </p>
                                                <div class="d-flex justify-content-between align-items-center mt-3">
                                                    <div class="text-muted small status-container">
                                                        <% 
                                                        let statusClass;
                                                        let displayStatus;
                                                        switch(installed.status.toLowerCase()) {
                                                            case 'init':
                                                            case 'pending':
                                                                statusClass = 'badge bg-warning text-dark';
                                                                displayStatus = 'In Progress..';
                                                                break;
                                                            case 'done':
                                                            case 'completed':
                                                                statusClass = 'badge bg-success text-white';
                                                                displayStatus = 'Running';
                                                                break;
                                                            case 'failed':
                                                                statusClass = 'badge bg-danger text-white';
                                                                displayStatus = 'Failed';
                                                                break;
                                                            default:
                                                                statusClass = 'badge bg-secondary text-white';
                                                                displayStatus = installed.status.charAt(0).toUpperCase() + installed.status.slice(1);
                                                        }
                                                        %>
                                                        <span class="<%= statusClass %> app-status" style="border-radius: 4px; padding: 4px 8px;">
                                                            <%= displayStatus %>
                                                        </span>
                                                    </div>
                                                    <%
                                                    let ingressUrl = '';
                                                    if (installed.deployment_details) {
                                                        const details = Array.isArray(installed.deployment_details) ? installed.deployment_details : [installed.deployment_details];
                                                        const ingress = details.find(detail => 
                                                            detail?.resource?.kind === 'Ingress' && 
                                                            detail?.raw_response?.spec?.rules?.[0]?.host
                                                        );
                                                        if (ingress) {
                                                            ingressUrl = `https://${ingress.raw_response.spec.rules[0].host}`;
                                                        }
                                                    }
                                                    const status = installed.status.toLowerCase();
                                                    const isInProgress = status === 'init' || status === 'pending';
                                                    const isRunning = status === 'done' || status === 'completed';
                                                    %>
                                                    <div class="open-app-container">
                                                        <% if (ingressUrl) { %>
                                                            <% if (isRunning) { %>
                                                                <a href="<%= ingressUrl %>" target="_blank" class="btn btn-primary btn-sm open-app-btn">
                                                                    <i class="bi bi-box-arrow-up-right"></i> Open App
                                                                </a>
                                                            <% } else if (isInProgress) { %>
                                                                <button class="btn btn-primary btn-sm open-app-btn" disabled>
                                                                    <i class="bi bi-box-arrow-up-right"></i> Open App
                                                                </button>
                                                            <% } %>
                                                        <% } %>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                <% } %>
                            <% }); %>
                        <% } else { %>
                            <div class="col-12 w-100">
                                <div class="alert alert-info text-center py-4">
                                    <i class="bi bi-info-circle me-2"></i>
                                    You haven't installed any applications yet. 
                                    <a href="/store" class="alert-link">Visit the store</a> to discover and install applications.
                                </div>
                            </div>
                        <% } %>
                    </div>
                </div>

                <!-- No Results Message (Hidden by default) -->
                <div class="no-results alert alert-info text-center mt-4 w-100 py-4" style="display: none;">
                    <i class="bi bi-search me-2"></i>
                    No applications match your search.
                </div>
            </main>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/controllers/headerController.js"></script>
    <script src="/js/controllers/installedAppsController.js"></script>

    <!-- Add auto-refresh functionality -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Store refresh intervals for each app
            const refreshIntervals = new Map();

            // Function to check app status
            async function checkAppStatus(installedId, appElement) {
                try {
                    // Get the current Firebase token
                    const user = firebase.auth().currentUser;
                    if (!user) {
                        console.log('User not authenticated');
                        return;
                    }
                    const token = await user.getIdToken();

                    // Make API call to check status
                    const response = await fetch(`/api/applications/status/${installedId}`, {
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });
                    
                    if (!response.ok) {
                        throw new Error('Failed to fetch status');
                    }

                    const data = await response.json();
                    
                    // Update status badge
                    const statusContainer = appElement.querySelector('.app-status');
                    const openAppContainer = appElement.querySelector('.open-app-container');
                    
                    let statusClass = '';
                    let displayStatus = '';
                    let openAppButton = '';
                    const ingressUrl = data.ingress_url || '';

                    // Update status display
                    switch(data.status.toLowerCase()) {
                        case 'init':
                        case 'pending':
                            statusClass = 'badge bg-warning text-dark';
                            displayStatus = 'In Progress..';
                            if (ingressUrl) {
                                openAppButton = `
                                    <button class="btn btn-primary btn-sm open-app-btn" disabled>
                                        <i class="bi bi-box-arrow-up-right"></i> Open App
                                    </button>`;
                            }
                            break;
                        case 'done':
                        case 'completed':
                            statusClass = 'badge bg-success text-white';
                            displayStatus = 'Running';
                            if (ingressUrl) {
                                openAppButton = `
                                    <a href="${ingressUrl}" target="_blank" class="btn btn-primary btn-sm open-app-btn">
                                        <i class="bi bi-box-arrow-up-right"></i> Open App
                                    </a>`;
                            }
                            // Clear interval when app is running
                            if (refreshIntervals.has(installedId)) {
                                clearInterval(refreshIntervals.get(installedId));
                                refreshIntervals.delete(installedId);
                            }
                            break;
                        case 'failed':
                            statusClass = 'badge bg-danger text-white';
                            displayStatus = 'Failed';
                            // Clear interval when app has failed
                            if (refreshIntervals.has(installedId)) {
                                clearInterval(refreshIntervals.get(installedId));
                                refreshIntervals.delete(installedId);
                            }
                            break;
                        default:
                            statusClass = 'badge bg-secondary text-white';
                            displayStatus = data.status.charAt(0).toUpperCase() + data.status.slice(1);
                    }

                    statusContainer.className = `${statusClass} app-status`;
                    statusContainer.style.borderRadius = '4px';
                    statusContainer.style.padding = '4px 8px';
                    statusContainer.textContent = displayStatus;

                    if (openAppButton) {
                        openAppContainer.innerHTML = openAppButton;
                    }

                } catch (error) {
                    console.error('Error checking app status:', error);
                }
            }

            // Initialize status checking for all apps
            document.querySelectorAll('.card[data-installed-id]').forEach(appElement => {
                const installedId = appElement.dataset.installedId;
                const status = appElement.querySelector('.app-status').textContent.trim().toLowerCase();
                
                // Only set up refresh for apps that are in progress
                if (status === 'in progress..' || status === 'pending') {
                    // Initial check
                    checkAppStatus(installedId, appElement);
                    
                    // Set up interval (every 10 seconds) and store it
                    const intervalId = setInterval(() => {
                        checkAppStatus(installedId, appElement);
                    }, 10000); // 10 seconds
                    
                    refreshIntervals.set(installedId, intervalId);
                }
            });

            // Clean up intervals when leaving the page
            window.addEventListener('beforeunload', () => {
                refreshIntervals.forEach(intervalId => clearInterval(intervalId));
                refreshIntervals.clear();
            });
        });
    </script>
</body>
</html> 