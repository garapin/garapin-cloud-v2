<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Garapin Cloud - Installed Apps</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/css/style.css">
    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-auth-compat.js"></script>
</head>
<body>
    <div class="container-fluid" data-firebase-config='<%= JSON.stringify(firebaseConfig) %>'>
        <div class="row">
            <%- include('partials/sidebar', {currentPage: 'installed-apps'}) %>

            <!-- Main content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 bg-light">
                <%- include('partials/header', {
                    pageTitle: 'Installed Apps',
                    currentPage: 'installed-apps'
                }) %>

                <!-- Search Bar -->
                <div class="row mb-2">
                    <div class="col-12">
                        <input type="text" class="form-control" placeholder="Search installed applications..." id="searchInstalledApps">
                    </div>
                </div>

                <!-- Applications Grid -->
                <div class="row g-3">
                    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 g-4" id="appsContainer">
                        <% if (applications && applications.length > 0) { %>
                            <% applications.forEach(installed => { %>
                                <% const app = installed.application_id %>
                                <% if (app && app._id) { %>
                                    <div class="col">
                                        <div class="card h-100" 
                                             data-app-id="<%= app._id %>" 
                                             data-installed-id="<%= installed._id %>"
                                             data-status="<%= installed.status %>">
                                            <% if (app.logo && app.logo.url) { %>
                                                <a href="/store/app/<%= app._id %>" class="text-decoration-none">
                                                    <img src="<%= app.logo.url %>" class="card-img-top p-3" alt="<%= app.title %>" style="height: 200px; object-fit: contain;">
                                                </a>
                                            <% } else { %>
                                                <a href="/store/app/<%= app._id %>" class="text-decoration-none">
                                                    <div class="card-img-top bg-light d-flex align-items-center justify-content-center" style="height: 200px;">
                                                        <i class="bi bi-box fs-1"></i>
                                                    </div>
                                                </a>
                                            <% } %>
                                            <div class="card-body">
                                                <h5 class="card-title">
                                                    <a href="/store/app/<%= app._id %>" class="text-decoration-none text-dark">
                                                        <%= app.title %>
                                                    </a>
                                                </h5>
                                                <div class="d-flex align-items-center mb-2">
                                                    <div class="text-warning me-2">
                                                        <% const rating = typeof app.rating === 'number' ? app.rating : 0; %>
                                                        <% for(let i = 1; i <= 5; i++) { %>
                                                            <i class="bi bi-star<%= rating >= i ? '-fill' : (rating > i-1 ? '-half' : '') %>"></i>
                                                        <% } %>
                                                    </div>
                                                    <small class="text-muted">(<%= app.installed_count || 0 %> installs)</small>
                                                </div>
                                                <p class="card-text text-muted">
                                                    <%- cleanAndTruncateDescription(app.description || 'No description available') %>
                                                </p>
                                                <div class="d-flex justify-content-between align-items-center mt-3">
                                                    <div class="text-muted small status-container">
                                                        <% 
                                                        let statusClass;
                                                        let displayStatus;
                                                        const status = installed.status ? installed.status.toUpperCase() : '';
                                                        
                                                        if (status === 'PENDING' || status === 'INIT') {
                                                            statusClass = 'badge bg-warning text-dark';
                                                            displayStatus = 'In Progress..';
                                                        } else if (status === 'COMPLETED' || status === 'DONE') {
                                                            statusClass = 'badge bg-success text-white';
                                                            displayStatus = 'Running';
                                                        } else {
                                                            statusClass = 'badge bg-secondary text-white';
                                                            displayStatus = status;
                                                        }
                                                        %>
                                                        <span class="<%= statusClass %> app-status" style="border-radius: 4px; padding: 4px 8px;">
                                                            <%= displayStatus %>
                                                        </span><br>
                                                        <%= new Date(installed.installed_at).toLocaleString('en-GB', { 
                                                            day: '2-digit',
                                                            month: 'short',
                                                            year: '2-digit',
                                                            hour: '2-digit',
                                                            minute: '2-digit',
                                                            hour12: false
                                                        }).replace(/\//g, '-').replace(',', '').replace(' ', '-') %>
                                                    </div>
                                                    <div class="open-app-container">
                                                        <%
                                                        let ingressUrl = '';
                                                        if (installed.deployment_details) {
                                                            const details = Array.isArray(installed.deployment_details) ? installed.deployment_details : [installed.deployment_details];
                                                            const ingress = details.find(detail => 
                                                                detail?.resource?.kind === 'Ingress' && 
                                                                detail?.raw_response?.spec?.rules?.[0]?.host
                                                            );
                                                            if (ingress) {
                                                                ingressUrl = `https://${ingress.raw_response.spec.rules[0].host}`;
                                                            }
                                                        }
                                                        %>
                                                        <% if (ingressUrl) { %>
                                                            <% if (status === 'COMPLETED' || status === 'DONE') { %>
                                                                <a href="<%= ingressUrl %>" target="_blank" class="btn btn-primary btn-sm open-app-btn">
                                                                    <i class="bi bi-box-arrow-up-right"></i> Open App
                                                                </a>
                                                            <% } else if (status === 'PENDING' || status === 'INIT') { %>
                                                                <button class="btn btn-primary btn-sm open-app-btn" disabled>
                                                                    <i class="bi bi-box-arrow-up-right"></i> Open App
                                                                </button>
                                                            <% } %>
                                                        <% } %>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                <% } %>
                            <% }); %>
                        <% } else { %>
                            <div class="col-12 w-100">
                                <div class="alert alert-info text-center py-4">
                                    <i class="bi bi-info-circle me-2"></i>
                                    You haven't installed any applications yet. 
                                    <a href="/store" class="alert-link">Visit the store</a> to discover and install applications.
                                </div>
                            </div>
                        <% } %>
                    </div>
                </div>

                <!-- No Results Message (Hidden by default) -->
                <div class="no-results alert alert-info text-center mt-4 w-100 py-4" style="display: none;">
                    <i class="bi bi-search me-2"></i>
                    No applications match your search.
                </div>
            </main>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/controllers/headerController.js"></script>
    <script src="/js/controllers/installedAppsController.js"></script>

    <!-- Add auto-refresh functionality -->
    <script>
        // Store refresh intervals globally
        const refreshIntervals = new Map();

        // Initialize Firebase first
        document.addEventListener('DOMContentLoaded', () => {
            const firebaseConfig = JSON.parse(document.querySelector('[data-firebase-config]').dataset.firebaseConfig);
            firebase.initializeApp(firebaseConfig);
        });

        // Function to wait for Firebase and Auth
        function waitForFirebaseAndAuth() {
            return new Promise((resolve) => {
                const checkFirebase = () => {
                    if (typeof firebase !== 'undefined' && firebase.auth && firebase.auth()) {
                        // Check if user is authenticated
                        firebase.auth().onAuthStateChanged((user) => {
                            if (user) {
                                resolve(user);
                            } else {
                                // If no user, keep checking
                                setTimeout(checkFirebase, 100);
                            }
                        });
                    } else {
                        setTimeout(checkFirebase, 100);
                    }
                };
                checkFirebase();
            });
        }

        // Function to check app status
        async function checkAppStatus(installedId, appElement) {
            try {
                // Get Firebase token
                const user = firebase.auth().currentUser;
                if (!user) {
                    return;
                }

                const token = await user.getIdToken();
                
                // Make API call to check status
                const response = await fetch(`/api/applications/status/${installedId}`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                if (!response.ok) {
                    throw new Error('Failed to fetch status');
                }

                const data = await response.json();
                
                // Update status badge
                const statusContainer = appElement.querySelector('.status-container .app-status');
                const openAppContainer = appElement.querySelector('.open-app-container');
                
                if (!statusContainer || !openAppContainer) {
                    return;
                }

                let statusClass = '';
                let displayStatus = '';
                let openAppButton = '';
                
                // Extract ingress URL from deployment details
                let ingressUrl = '';
                if (data.deployment_details) {
                    const details = Array.isArray(data.deployment_details) ? data.deployment_details : [data.deployment_details];
                    const ingress = details.find(detail => 
                        detail?.resource?.kind === 'Ingress' && 
                        detail?.raw_response?.spec?.rules?.[0]?.host
                    );
                    
                    if (ingress) {
                        ingressUrl = `https://${ingress.raw_response.spec.rules[0].host}`;
                    }
                }

                const currentStatus = (data.status || '').toUpperCase();

                // Keep monitoring if status is pending
                if (currentStatus === 'PENDING' || currentStatus === 'INIT') {
                    statusClass = 'badge bg-warning text-dark';
                    displayStatus = 'In Progress..';
                    if (ingressUrl) {
                        openAppButton = `
                            <button class="btn btn-primary btn-sm open-app-btn" disabled>
                                <i class="bi bi-box-arrow-up-right"></i> Open App
                            </button>`;
                    }

                    // Ensure we have an interval for pending status
                    if (!refreshIntervals.has(installedId)) {
                        const intervalId = setInterval(() => checkAppStatus(installedId, appElement), 5000);
                        refreshIntervals.set(installedId, intervalId);
                    }
                } else if (currentStatus === 'COMPLETED' || currentStatus === 'DONE') {
                    statusClass = 'badge bg-success text-white';
                    displayStatus = 'Running';
                    if (ingressUrl) {
                        openAppButton = `
                            <a href="${ingressUrl}" target="_blank" class="btn btn-primary btn-sm open-app-btn">
                                <i class="bi bi-box-arrow-up-right"></i> Open App
                            </a>`;
                    }

                    // Update status badge immediately
                    statusContainer.className = `${statusClass} app-status`;
                    statusContainer.style.borderRadius = '4px';
                    statusContainer.style.padding = '4px 8px';
                    statusContainer.innerHTML = displayStatus;

                    // Update button immediately
                    if (openAppButton) {
                        openAppContainer.innerHTML = openAppButton;
                    }

                    // Update data-status attribute
                    appElement.dataset.status = currentStatus;

                    // Stop monitoring since status is completed
                    const intervalId = refreshIntervals.get(installedId);
                    if (intervalId) {
                        clearInterval(intervalId);
                        refreshIntervals.delete(installedId);
                    }
                } else {
                    statusClass = 'badge bg-secondary text-white';
                    displayStatus = currentStatus;

                    // Stop monitoring for any other status
                    const intervalId = refreshIntervals.get(installedId);
                    if (intervalId) {
                        clearInterval(intervalId);
                        refreshIntervals.delete(installedId);
                    }
                }
                
                // Always update the UI elements
                statusContainer.className = `${statusClass} app-status`;
                statusContainer.style.borderRadius = '4px';
                statusContainer.style.padding = '4px 8px';
                statusContainer.innerHTML = displayStatus;

                if (openAppButton) {
                    openAppContainer.innerHTML = openAppButton;
                }

                // Update data-status attribute
                appElement.dataset.status = currentStatus;

            } catch (error) {
                // Silent error handling
            }
        }

        // Initialize monitoring
        async function initializeMonitoring() {
            try {
                const user = await waitForFirebaseAndAuth();

                // Get all app cards
                const appCards = document.querySelectorAll('#appsContainer .card[data-installed-id]');
                
                // Filter for pending apps and start monitoring
                appCards.forEach(appElement => {
                    const status = (appElement.dataset.status || '').toUpperCase();
                    const installedId = appElement.dataset.installedId;
                    
                    if (status === 'PENDING' || status === 'INIT') {
                        // Initial check
                        checkAppStatus(installedId, appElement);
                        
                        // Set up interval
                        const intervalId = setInterval(() => checkAppStatus(installedId, appElement), 5000);
                        refreshIntervals.set(installedId, intervalId);
                    }
                });

                // Clean up intervals when leaving the page
                window.addEventListener('beforeunload', () => {
                    refreshIntervals.forEach(intervalId => clearInterval(intervalId));
                    refreshIntervals.clear();
                });

            } catch (error) {
                // Silent error handling
            }
        }

        // Start monitoring after Firebase is initialized
        document.addEventListener('DOMContentLoaded', () => {
            // Initialize Firebase first
            const firebaseConfig = JSON.parse(document.querySelector('[data-firebase-config]').dataset.firebaseConfig);
            firebase.initializeApp(firebaseConfig);
            
            // Then start monitoring after a delay
            setTimeout(initializeMonitoring, 2000);
        });
    </script>
</body>
</html> 