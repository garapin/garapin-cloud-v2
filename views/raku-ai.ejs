<!DOCTYPE html>
<html lang="en">
<head>
    <title>Garapin Cloud - Raku AI</title>
    <%- include('partials/head') %>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css">
    <style>
        .raku-card {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
        }
        .raku-card h3 {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
        }
        /* Dark mode styles for date input */
        .dark-mode .date-input {
            background-color: var(--dark-input-bg) !important;
            border-color: var(--dark-border) !important;
            color: var(--dark-text) !important;
        }
        .dark-mode .date-input::placeholder {
            color: rgba(222, 228, 238, 0.5) !important;
        }
        .dark-mode .date-input-group .input-group-text {
            background-color: var(--dark-input-bg) !important;
            border-color: var(--dark-border) !important;
            color: var(--dark-text) !important;
        }
        /* Dark mode styles for terms box */
        .dark-mode .terms-box {
            background-color: var(--dark-card-bg) !important;
            border: 1px solid var(--dark-border);
        }
        /* Dark mode styles for Raku AI cards */
        .dark-mode .raku-card {
            background-color: #011168 !important;
        }
        /* Dark mode styles for API keys section */
        .dark-mode h5.card-title,
        .dark-mode h6.mb-0 {
            color: #E2E8F0 !important;
            font-weight: 600 !important;
        }
        .dark-mode .text-muted,
        .dark-mode p {
            color: #CBD5E1 !important;
        }
        .dark-mode .alert-warning {
            background-color: rgba(234, 179, 8, 0.1);
            border-color: rgba(234, 179, 8, 0.2);
            color: #EAB308;
        }
        .dark-mode .alert-warning .alert-heading {
            color: #F59E0B;
        }
        .dark-mode .alert-warning ul {
            color: #FCD34D;
        }
        /* Dark mode table styles */
        .dark-mode .table {
            color: #E2E8F0 !important;
            background-color: var(--dark-card-bg);
        }
        .dark-mode .table thead {
            background-color: var(--dark-hover);
        }
        .dark-mode .table thead th {
            color: #E2E8F0 !important;
            border-bottom-color: var(--dark-border);
            font-weight: 600;
            background-color: var(--dark-hover);
        }
        .dark-mode .table tbody td {
            color: #E2E8F0 !important;
            border-color: var(--dark-border);
            background-color: var(--dark-card-bg);
        }
        .dark-mode .table-responsive {
            background-color: var(--dark-card-bg);
            border-radius: 0.5rem;
        }
        /* Dark mode background fix */
        .dark-mode .bg-light {
            background-color: var(--dark-bg) !important;
        }
        /* Dark mode badge styles */
        .dark-mode .badge.bg-success {
            background-color: #059669 !important;
            color: #E2E8F0;
        }
        .dark-mode .badge.bg-danger {
            background-color: #DC2626 !important;
            color: #E2E8F0;
        }
        /* Dark mode button styles in table */
        .dark-mode .btn-outline-secondary {
            color: #E2E8F0;
            border-color: #4B5563;
        }
        .dark-mode .btn-outline-secondary:hover {
            background-color: #4B5563;
            color: #E2E8F0;
        }
        .dark-mode .btn-outline-danger {
            color: #DC2626;
            border-color: #DC2626;
        }
        .dark-mode .btn-outline-danger:hover {
            background-color: #DC2626;
            color: #E2E8F0;
        }
        /* Dark mode modal styles */
        .dark-mode .modal-content {
            background-color: var(--dark-card-bg);
            border-color: var(--dark-border);
        }
        .dark-mode .modal-header {
            border-bottom-color: var(--dark-border);
        }
        .dark-mode .modal-footer {
            border-top-color: var(--dark-border);
        }
        .dark-mode .modal-title {
            color: #E2E8F0;
        }
        .dark-mode .modal-body .form-label {
            color: #E2E8F0;
        }
        .dark-mode .modal-body input.form-control {
            background-color: var(--dark-input-bg);
            border-color: var(--dark-border);
            color: #E2E8F0;
        }
        .dark-mode .modal-body input.form-control:focus {
            border-color: #3B82F6;
            box-shadow: 0 0 0 0.25rem rgba(59, 130, 246, 0.25);
        }
        .dark-mode .modal-body input.form-control::placeholder {
            color: #94A3B8;
        }
        .dark-mode .btn-close {
            filter: invert(1) grayscale(100%) brightness(200%);
        }
        .dark-mode .alert-success {
            background-color: rgba(5, 150, 105, 0.1);
            border-color: rgba(5, 150, 105, 0.2);
            color: #10B981;
        }
        .dark-mode .alert-success strong {
            color: #34D399;
        }
        .dark-mode .text-danger {
            color: #EF4444 !important;
        }
        .dark-mode .modal .btn-secondary {
            background-color: #3B82F6;
            border-color: #3B82F6;
            color: #E2E8F0;
        }
        .dark-mode .modal .btn-secondary:hover {
            background-color: #2563EB;
            border-color: #2563EB;
        }
        .dark-mode .modal .btn-primary {
            background-color: #3B82F6;
            border-color: #3B82F6;
            color: #E2E8F0;
        }
        .dark-mode .modal .btn-primary:hover {
            background-color: #2563EB;
            border-color: #2563EB;
        }
        /* Dark mode styles for daterangepicker */
        .dark-mode .daterangepicker {
            background-color: var(--dark-card-bg);
            border-color: var(--dark-border);
        }
        .dark-mode .daterangepicker:before,
        .dark-mode .daterangepicker:after {
            border-bottom-color: var(--dark-border);
        }
        .dark-mode .daterangepicker .calendar-table {
            background-color: var(--dark-card-bg);
            border: none;
        }
        .dark-mode .daterangepicker td.available:hover, 
        .dark-mode .daterangepicker th.available:hover {
            background-color: var(--dark-hover);
        }
        .dark-mode .daterangepicker td.off, 
        .dark-mode .daterangepicker td.off.in-range, 
        .dark-mode .daterangepicker td.off.start-date, 
        .dark-mode .daterangepicker td.off.end-date {
            background-color: var(--dark-bg);
            color: #64748B;
        }
        .dark-mode .daterangepicker td.in-range {
            background-color: rgba(59, 130, 246, 0.1);
            color: #E2E8F0;
        }
        .dark-mode .daterangepicker td.active, 
        .dark-mode .daterangepicker td.active:hover {
            background-color: #3B82F6;
            color: #E2E8F0;
        }
        .dark-mode .daterangepicker .calendar-table .next span, 
        .dark-mode .daterangepicker .calendar-table .prev span {
            border-color: #E2E8F0;
        }
        .dark-mode .daterangepicker .calendar-table .next:hover span, 
        .dark-mode .daterangepicker .calendar-table .prev:hover span {
            border-color: #3B82F6;
        }
        .dark-mode .daterangepicker .calendar-table th, 
        .dark-mode .daterangepicker .calendar-table td {
            color: #E2E8F0;
        }
        .dark-mode .daterangepicker .ranges li {
            color: #E2E8F0;
        }
        .dark-mode .daterangepicker .ranges li:hover {
            background-color: var(--dark-hover);
        }
        .dark-mode .daterangepicker .ranges li.active {
            background-color: #3B82F6;
            color: #E2E8F0;
        }
        .dark-mode .daterangepicker .drp-buttons {
            border-top-color: var(--dark-border);
        }
        .dark-mode .daterangepicker .drp-selected {
            color: #94A3B8;
        }
        .dark-mode .daterangepicker .btn {
            background-color: #3B82F6;
            border-color: #3B82F6;
            color: #E2E8F0;
        }
        .dark-mode .daterangepicker .btn:hover {
            background-color: #2563EB;
            border-color: #2563EB;
        }
        .dark-mode .daterangepicker .cancelBtn {
            background-color: #4B5563;
            border-color: #4B5563;
        }
        .dark-mode .daterangepicker .cancelBtn:hover {
            background-color: #374151;
            border-color: #374151;
        }
        .dark-mode .daterangepicker select.hourselect,
        .dark-mode .daterangepicker select.minuteselect,
        .dark-mode .daterangepicker select.secondselect,
        .dark-mode .daterangepicker select.ampmselect {
            background-color: var(--dark-input-bg);
            border-color: var(--dark-border);
            color: #E2E8F0;
        }
        .dark-mode .daterangepicker .calendar-time {
            background-color: var(--dark-card-bg);
        }
    </style>
    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-auth-compat.js"></script>
</head>
<body>
    <div class="container-fluid" data-firebase-config='<%= JSON.stringify(firebaseConfig) %>'>
        <div class="row">
            <%- include('partials/sidebar', {currentPage: 'raku-ai'}) %>

            <!-- Main content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
                <%- include('partials/header', {pageTitle: 'Raku AI'}) %>

                <!-- Error Messages -->
                <% if (typeof query !== 'undefined' && query.error) { %>
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <% if (query.error === 'approval_required') { %>
                            <strong>Access Denied:</strong> You need an approved Raku AI account to access this feature.
                        <% } else if (query.error === 'server_error') { %>
                            <strong>System Error:</strong> An error occurred while checking your access permissions. Please try again later.
                        <% } else { %>
                            <strong>Error:</strong> <%= query.error %>
                        <% } %>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                <% } %>

                <!-- Raku AI content -->
                <div class="row g-4">
                    <!-- Balance Card -->
                    <div class="col-12 col-lg-6">
                        <div class="card text-white h-100 raku-card" style="background-color: #011168;">
                            <div class="card-body p-3 d-flex flex-column">
                                <h5 class="card-title mb-3" style="color: #ffffff; font-weight: normal;">Saldo</h5>
                                <h2 class="card-text mb-4" style="font-size: 3.5rem;" id="userSaldoDisplay">Loading...</h2>
                                <div class="d-flex mt-auto">
                                    <% if (typeof raku_ai_approved !== 'undefined' && raku_ai_approved === true) { %>
                                        <a href="/raku-ai/tambah-saldo" class="btn btn-primary me-2" style="width: 80%;">Tambah Saldo</a>
                                        <a href="/raku-ai/history" class="btn btn-outline-light" style="width: 20%;">History</a>
                                    <% } else { %>
                                        <button class="btn btn-secondary me-2" style="width: 80%;" disabled title="Approval Required">Tambah Saldo</button>
                                        <button class="btn btn-outline-secondary" style="width: 20%;" disabled title="Approval Required">History</button>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Status Card -->
                    <div class="col-12 col-lg-6">
                        <div class="card text-white h-100 raku-card" style="background-color: #011168;">
                            <div class="card-body p-3 d-flex flex-column">
                                <div class="d-flex justify-content-between align-items-start mb-3">
                                    <h5 class="card-title mb-0" style="color: #ffffff; font-weight: normal;">Status</h5>
                                    <div class="input-group date-input-group" style="width: 286px;">
                                        <span class="input-group-text">
                                            <i class="bi bi-calendar-range"></i>
                                        </span>
                                        <input type="text" class="form-control date-input" 
                                            id="statusDateRangePicker" 
                                            placeholder="Select date range" 
                                            readonly
                                            style="cursor: pointer; font-size: 0.85rem;"
                                            title="Click to select date range">
                                    </div>
                                </div>
                                <div class="d-flex justify-content-between align-items-center mt-auto">
                                    <div style="width: 100%;">
                                        <div class="d-flex justify-content-between align-items-center mb-1">
                                            <span style="font-weight: normal;">Receipt</span>
                                            <h3 class="mb-0" style="font-weight: normal; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif; min-width: 60px; text-align: right;" id="receiptCount">Loading...</h3>
                                        </div>
                                        <div class="d-flex justify-content-between align-items-center mb-1">
                                            <span style="font-weight: normal;">Marketing & Promotion</span>
                                            <h3 class="mb-0" style="font-weight: normal; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif; min-width: 60px; text-align: right;">0</h3>
                                        </div>
                                        <div class="d-flex justify-content-between align-items-center mb-1">
                                            <span style="font-weight: normal;">Product & Service</span>
                                            <h3 class="mb-0" style="font-weight: normal; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif; min-width: 60px; text-align: right;">0</h3>
                                        </div>
                                        <div class="d-flex justify-content-between align-items-center">
                                            <span style="font-weight: normal;">Order & Reservation</span>
                                            <h3 class="mb-0" style="font-weight: normal; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif; min-width: 60px; text-align: right;">0</h3>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Dynamic Content Section -->
                <div class="row mt-4">
                    <div class="col-12">
                        <!-- Request Section -->
                        <div id="requestSection" class="card">
                            <div class="card-body">
                                <h5 class="card-title mb-4">Permintaan Akses Raku AI</h5>
                                <form id="rakuAiRequestForm" class="needs-validation" novalidate>
                                    <!-- Business Information -->
                                    <div class="mb-4">
                                        <label for="businessType" class="form-label">Jenis usaha apa yang Anda miliki?</label>
                                        <input type="text" class="form-control" id="businessType" required
                                            placeholder="contoh: Restaurant, Retail Store, Online Shop">
                                        <div class="invalid-feedback">
                                            Mohon isi jenis usaha Anda.
                                        </div>
                                    </div>

                                    <!-- Application Information -->
                                    <div class="mb-4">
                                        <label for="applicationType" class="form-label">Aplikasi apa yang Anda miliki?</label>
                                        <input type="text" class="form-control" id="applicationType" required
                                            placeholder="contoh: E-commerce, Booking System, CRM">
                                        <div class="invalid-feedback">
                                            Mohon isi jenis aplikasi Anda.
                                        </div>
                                    </div>

                                    <!-- Application Details -->
                                    <div class="mb-4">
                                        <label for="appName" class="form-label">Nama Aplikasi</label>
                                        <input type="text" class="form-control" id="appName" required>
                                    </div>

                                    <div class="mb-4">
                                        <label for="appDescription" class="form-label">Deskripsi Aplikasi</label>
                                        <textarea class="form-control" id="appDescription" rows="3" required
                                            placeholder="Jelaskan secara singkat tentang aplikasi Anda dan fitur-fitur utamanya"></textarea>
                                        <div class="invalid-feedback">
                                            Mohon isi deskripsi aplikasi Anda.
                                        </div>
                                    </div>

                                    <!-- Planning Implementasi -->
                                    <div class="mb-4">
                                        <label class="form-label">Planning Implementasi</label>
                                        <p class="text-muted small">Pilih fitur yang ingin Anda implementasikan dan jelaskan rencana implementasinya</p>
                                        
                                        <!-- Receipt -->
                                        <div class="mb-3">
                                            <div class="form-check mb-2">
                                                <input class="form-check-input" type="checkbox" id="receiptCheck" name="features">
                                                <label class="form-check-label" for="receiptCheck">Receipt</label>
                                            </div>
                                            <div class="implementation-plan" id="receiptPlan" style="display: none;">
                                                <textarea class="form-control" rows="2" 
                                                    placeholder="Contoh: Saya ingin mengimplementasikan receipt notes ke sistem POS saya"></textarea>
                                            </div>
                                        </div>

                                        <!-- Marketing & Promotion -->
                                        <div class="mb-3">
                                            <div class="form-check mb-2">
                                                <input class="form-check-input" type="checkbox" id="marketingCheck" name="features">
                                                <label class="form-check-label" for="marketingCheck">Marketing & Promotion</label>
                                            </div>
                                            <div class="implementation-plan" id="marketingPlan" style="display: none;">
                                                <textarea class="form-control" rows="2" 
                                                    placeholder="Jelaskan rencana implementasi untuk marketing dan promosi"></textarea>
                                            </div>
                                        </div>

                                        <!-- Product & Service -->
                                        <div class="mb-3">
                                            <div class="form-check mb-2">
                                                <input class="form-check-input" type="checkbox" id="productCheck" name="features">
                                                <label class="form-check-label" for="productCheck">Product & Service</label>
                                            </div>
                                            <div class="implementation-plan" id="productPlan" style="display: none;">
                                                <textarea class="form-control" rows="2" 
                                                    placeholder="Jelaskan rencana implementasi untuk produk dan layanan"></textarea>
                                            </div>
                                        </div>

                                        <!-- Order & Reservation -->
                                        <div class="mb-3">
                                            <div class="form-check mb-2">
                                                <input class="form-check-input" type="checkbox" id="orderCheck" name="features">
                                                <label class="form-check-label" for="orderCheck">Order & Reservation</label>
                                            </div>
                                            <div class="implementation-plan" id="orderPlan" style="display: none;">
                                                <textarea class="form-control" rows="2" 
                                                    placeholder="Jelaskan rencana implementasi untuk pemesanan dan reservasi"></textarea>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="mb-4">
                                        <label class="form-label d-block">Platform Aplikasi</label>
                                        <div class="form-check form-check-inline">
                                            <input class="form-check-input" type="radio" name="platform" id="platformWeb" value="web" required>
                                            <label class="form-check-label" for="platformWeb">Web Application</label>
                                        </div>
                                        <div class="form-check form-check-inline">
                                            <input class="form-check-input" type="radio" name="platform" id="platformMobile" value="mobile">
                                            <label class="form-check-label" for="platformMobile">Mobile Application</label>
                                        </div>
                                    </div>

                                    <div class="mb-4">
                                        <label for="appLink" class="form-label">Link Aplikasi</label>
                                        <input type="url" class="form-control" id="appLink" required
                                            placeholder="https://your-application.com">
                                    </div>

                                    <!-- Terms and Agreement -->
                                    <div class="mb-4">
                                        <div class="terms-box p-3 mb-3 bg-light" style="height: 400px; overflow-y: auto;">
                                            <h6>Syarat dan Ketentuan Penggunaan Raku AI - WhatsApp Integration</h6>
                                            <p>1. Penggunaan Layanan</p>
                                            <ul>
                                                <li>Dengan menggunakan layanan Raku AI - WhatsApp Integration, Anda setuju untuk menggunakan layanan ini hanya untuk keperluan bisnis yang sah dan sesuai dengan peraturan perundang-undangan yang berlaku.​</li>
                                                <li>Anda tidak diperkenankan menggunakan layanan ini untuk aktivitas yang ilegal, tidak sah, atau bertentangan dengan kebijakan WhatsApp.​</li>
                                                <li>Anda bertanggung jawab penuh atas keamanan akun dan kredensial akses Anda.​</li>
                                                <li>Pengguna dilarang menyalahgunakan integrasi WhatsApp ini untuk melakukan WA Blast atau pengiriman pesan massal yang tidak sesuai dengan kebijakan WhatsApp.​</li>
                                                <li>Anda tidak diperkenankan mengirim pesan yang menyesatkan, menipu, atau melanggar hak kekayaan intelektual pihak ketiga.​</li>
                                                <li>Anda tidak diperkenankan menggunakan layanan ini untuk aktivitas yang dapat merugikan, mengancam, atau melecehkan individu atau kelompok tertentu.​</li>
                                            </ul>
                                            <p>2. Privasi dan Data</p>
                                            <ul>
                                                <li>Anda memberikan izin kepada Raku AI untuk memproses data yang terkait dengan integrasi WhatsApp Anda sesuai dengan kebutuhan layanan.​</li>
                                                <li>Kami berkomitmen untuk melindungi dan menjaga kerahasiaan data Anda sesuai dengan kebijakan privasi kami.​</li>
                                                <li>Anda tetap memiliki kepemilikan penuh atas data yang Anda kelola melalui layanan ini.​</li>
                                                <li>Anda harus memastikan bahwa Anda memiliki semua izin dan persetujuan yang diperlukan dari pengguna akhir sebelum mengumpulkan, menggunakan, atau membagikan informasi mereka.​</li>
                                            </ul>
                                            <p>3. Ketersediaan Layanan</p>
                                            <ul>
                                                <li>Kami berusaha untuk menjaga ketersediaan layanan sebaik mungkin, namun tidak dapat menjamin uptime 100%.​</li>
                                                <li>Raku AI berhak untuk melakukan perubahan, pemeliharaan, atau penghentian layanan dengan pemberitahuan sebelumnya.​</li>
                                            </ul>
                                            <p>4. Biaya dan Pembayaran</p>
                                            <ul>
                                                <li>Pengguna diwajibkan untuk melakukan top-up kredit untuk menggunakan layanan ini.​</li>
                                                <li>Anda setuju untuk melakukan pembayaran atas layanan yang digunakan sesuai dengan metode dan jadwal yang telah ditentukan.​</li>
                                                <li>Kegagalan dalam melakukan pembayaran dapat mengakibatkan penghentian sementara atau permanen atas akses layanan.​</li>
                                            </ul>
                                            <p>5. Batasan Tanggung Jawab</p>
                                            <ul>
                                                <li>Raku AI tidak bertanggung jawab atas kerugian yang timbul akibat penyalahgunaan layanan oleh pengguna.​</li>
                                                <li>Kami tidak menjamin bahwa layanan akan selalu bebas dari kesalahan atau gangguan teknis yang mungkin terjadi.​</li>
                                                <li>Pengguna bertanggung jawab penuh atas konten yang disebarkan melalui layanan ini.​</li>
                                                <li>Setiap aktivitas ilegal yang dilakukan oleh pengguna akan membebaskan Raku AI dari tuntutan hukum apa pun.​</li>
                                            </ul>
                                            <p>6. Perubahan Syarat dan Ketentuan</p>
                                            <ul>
                                                <li>Kami dapat memperbarui Syarat dan Ketentuan ini sewaktu-waktu. Perubahan akan diberitahukan melalui saluran komunikasi resmi kami.​</li>
                                                <li>Dengan terus menggunakan layanan setelah perubahan diberlakukan, Anda dianggap menyetujui Syarat dan Ketentuan yang diperbarui.​</li>
                                            </ul>
                                            <p>7. Kepatuhan terhadap Kebijakan WhatsApp</p>
                                            <ul>
                                                <li>Anda setuju untuk mematuhi semua kebijakan dan pedoman resmi WhatsApp, termasuk namun tidak terbatas pada:​
                                                    <ul>
                                                        <li>Kebijakan Perdagangan WhatsApp: Tidak menggunakan layanan untuk mempromosikan atau menjual produk atau layanan yang dilarang oleh kebijakan WhatsApp, seperti:​
                                                            <ul>
                                                                <li>Produk tembakau dan perlengkapannya</li>
                                                                <li>Obat-obatan terlarang atau obat resep tanpa izin</li>
                                                                <li>Alkohol</li>
                                                                <li>Suplemen yang tidak aman</li>
                                                                <li>Senjata, amunisi, atau bahan peledak</li>
                                                                <li>Hewan</li>
                                                                <li>Produk atau layanan untuk dewasa</li>
                                                                <li>Bagian tubuh atau cairan tubuh manusia</li>
                                                                <li>Produk perawatan kesehatan dan medis tertentu</li>
                                                                <li>Barang atau produk yang menggambarkan aktivitas seksual secara eksplisit</li>
                                                                <li>Layanan perjudian dengan uang nyata</li>
                                                                <li>Layanan kencan</li>
                                                                <li>Produk atau item yang memfasilitasi atau mendorong akses tidak sah ke media digital</li>
                                                            </ul>
                                                        </li>
                                                        <li>Kebijakan Pesan Bisnis WhatsApp: Mengirim pesan yang sesuai dengan pedoman konten dan tidak melanggar kebijakan pesan bisnis WhatsApp.​</li>
                                                        <li>Kebijakan Anti-Spam: Tidak mengirim pesan spam atau pesan yang tidak diinginkan kepada pengguna tanpa persetujuan mereka.​</li>
                                                    </ul>
                                                </li>
                                                <li>Kebijakan Pesan Bisnis WhatsApp: Mengirim pesan yang sesuai dengan pedoman konten dan tidak melanggar kebijakan pesan bisnis WhatsApp.​</li>
                                                <li>Kebijakan Anti-Spam: Tidak mengirim pesan spam atau pesan yang tidak diinginkan kepada pengguna tanpa persetujuan mereka.​</li>
                                            </ul>
                                            <p>8. Penegakan Kebijakan dan Penghentian Layanan</p>
                                            <ul>
                                                <li>Raku AI berhak untuk menghapus atau menghentikan akses pengguna yang terlibat dalam aktivitas ilegal atau aktivitas lain yang tidak sesuai dengan kebijakan perusahaan.​</li>
                                                <li>Kami dapat membatasi atau menghapus akses atau penggunaan Anda terhadap layanan jika Anda menerima banyak masukan negatif, menimbulkan kerugian pada WhatsApp atau pengguna kami, melanggar atau mendorong orang lain untuk melanggar ketentuan atau kebijakan kami, atau untuk mempertahankan pengalaman berkualitas tinggi di WhatsApp.​</li>
                                            </ul>
                                            <p>Dengan menggunakan layanan Raku AI - WhatsApp Integration, Anda menyatakan telah membaca, memahami, dan menyetujui seluruh Syarat dan Ketentuan ini.​</p>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="agreeTerms" required>
                                            <label class="form-check-label" for="agreeTerms">
                                                Saya telah membaca dan menyetujui syarat dan ketentuan yang berlaku
                                            </label>
                                            <div class="invalid-feedback">
                                                Anda harus menyetujui syarat dan ketentuan.
                                            </div>
                                        </div>
                                    </div>

                                    <div class="text-end">
                                        <button type="submit" class="btn btn-primary">Kirim Permintaan</button>
                                    </div>
                                </form>
                            </div>
                        </div>

                        <!-- Main Content Section (Initially Hidden) -->
                        <div id="mainContent" class="card d-none">
                            <div class="card-body">
                                <h5 class="card-title">Raku AI - General</h5>
                                
                                <!-- API Keys Section -->
                                <div class="mt-4">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h6 class="mb-0">API keys</h6>
                                        <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#createApiKeyModal">
                                            <i class="bi bi-plus"></i> Create new secret key
                                        </button>
                                    </div>

                                    <!-- Create API Key Modal -->
                                    <div class="modal fade" id="createApiKeyModal" tabindex="-1">
                                        <div class="modal-dialog">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title">Create New API Key</h5>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                                </div>
                                                <div class="modal-body">
                                                    <form id="createApiKeyForm">
                                                        <div class="mb-3">
                                                            <label for="apiKeyName" class="form-label">Name</label>
                                                            <input type="text" class="form-control" id="apiKeyName" required
                                                                placeholder="Enter a name for your API key">
                                                        </div>
                                                    </form>
                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                                    <button type="button" class="btn btn-primary" id="createApiKeyBtn">Create</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- API Key Created Success Modal -->
                                    <div class="modal fade" id="apiKeyCreatedModal" tabindex="-1">
                                        <div class="modal-dialog">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title">API Key Created</h5>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                                </div>
                                                <div class="modal-body">
                                                    <div class="alert alert-success">
                                                        <strong>Success!</strong> Your new API key has been created.
                                                    </div>
                                                    <div class="mb-3">
                                                        <label class="form-label">Your API Key:</label>
                                                        <div class="input-group">
                                                            <input type="text" class="form-control" id="newApiKey" readonly>
                                                            <button class="btn btn-outline-secondary" type="button" onclick="copyApiKey()">
                                                                <i class="bi bi-clipboard"></i>
                                                            </button>
                                                        </div>
                                                        <small class="text-danger">
                                                            Make sure to copy your API key now. You won't be able to see it again!
                                                        </small>
                                                    </div>
                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Done</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <p class="text-muted mb-2">As the owner of this project, you can view and manage all API keys associated with this project.</p>

                                    <div class="alert alert-warning mb-4">
                                        <h6 class="alert-heading d-flex align-items-center">
                                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                            Security Notice:
                                        </h6>
                                        <ul class="mb-0 ps-3">
                                            <li>Keep your API keys confidential and do not share them with others.</li>
                                            <li>Never expose your API keys in client-side code, public repositories, or unsecured environments.</li>
                                            <li>If an API key is compromised, revoke and regenerate it immediately to prevent unauthorized access.</li>
                                            <li>To protect your account and data, our system may automatically deactivate any API key detected in a public or insecure location.</li>
                                        </ul>
                                    </div>
                                    
                                    <!-- API Keys Table -->
                                    <div class="table-responsive">
                                        <table class="table" id="apiKeysTable">
                                            <thead>
                                                <tr>
                                                    <th>NAME</th>
                                                    <th>SECRET KEY</th>
                                                    <th>CREATED</th>
                                                    <th>LAST USED</th>
                                                    <th>CREATED BY</th>
                                                    <th>STATUS</th>
                                                    <th>ACTIONS</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <!-- API keys will be loaded here dynamically -->
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <%- include('partials/scripts') %>
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
    <script src="/js/controllers/rakuAiController.js"></script>
    
    <script>
        // Initialize Firebase
        const firebaseConfig = JSON.parse(document.querySelector('[data-firebase-config]').dataset.firebaseConfig);
        if (!firebase.apps.length) {
            firebase.initializeApp(firebaseConfig);
        }

        // Function to disable all form fields
        function disableForm() {
            const form = document.getElementById('rakuAiRequestForm');
            const elements = form.elements;
            for (let i = 0; i < elements.length; i++) {
                elements[i].disabled = true;
            }
            const submitBtn = form.querySelector('button[type="submit"]');
            submitBtn.textContent = 'Pengajuan Terikirim - Tunggu max 24 Jam untuk approval';
            submitBtn.classList.remove('btn-primary');
            submitBtn.classList.add('btn-danger');
            submitBtn.disabled = true;
        }

        // Function to populate form with existing data
        function populateForm(data) {
            if (!data) return;

            if (data.status === 'Approved') {
                // Change title and show approved view
                document.querySelector('.card-title').textContent = 'Raku AI General';
                document.getElementById('requestSection').classList.add('d-none');
                document.getElementById('mainContent').classList.remove('d-none');
                return;
            }

            document.getElementById('businessType').value = data.business_type || '';
            document.getElementById('applicationType').value = data.application_type || '';
            document.getElementById('appName').value = data.app_name || '';
            document.getElementById('appDescription').value = data.app_description || '';
            document.getElementById('appLink').value = data.app_link || '';
            
            // Set platform
            if (data.platform) {
                const platformInput = document.querySelector(`input[name="platform"][value="${data.platform}"]`);
                if (platformInput) {
                    platformInput.checked = true;
                }
            }

            // Set features and show implementation plans
            if (data.features) {
                Object.entries(data.features).forEach(([feature, details]) => {
                    // Map database feature names to checkbox IDs
                    let checkboxId;
                    if (feature === 'receipt') {
                        checkboxId = 'receiptCheck';
                    } else if (feature === 'marketing_promotion') {
                        checkboxId = 'marketingCheck';
                    } else if (feature === 'product_service') {
                        checkboxId = 'productCheck';
                    } else if (feature === 'order_reservation') {
                        checkboxId = 'orderCheck';
                    } else {
                        checkboxId = feature.replace(/_/g, '') + 'Check';
                    }
                    
                    const checkbox = document.getElementById(checkboxId);
                    if (checkbox && details.selected) {
                        checkbox.checked = true;
                        const planId = checkboxId.replace('Check', 'Plan');
                        const planElement = document.getElementById(planId);
                        if (planElement) {
                            planElement.style.display = 'block';
                            const textarea = planElement.querySelector('textarea');
                            if (textarea) {
                                textarea.value = details.implementation_plan || '';
                            }
                        }
                    }
                });
            }

            // Do NOT set Terms and Conditions checkbox as checked by default
            // document.getElementById('agreeTerms').checked = true;
            
            // However, if this is an existing submission with user_agreement set to true, check the box
            if (data.user_agreement === true) {
                document.getElementById('agreeTerms').checked = true;
            }

            // If status is Requested, disable the form
            if (data.status === 'Requested') {
                disableForm();
            }
        }

        // Check for existing Raku AI request data
        async function checkExistingRequest() {
            try {
                const user = firebase.auth().currentUser;
                if (!user) return;

                const token = await user.getIdToken();
                
                // First, get the user's amount from the users table
                try {
                    const userResponse = await fetch('/profile/user-data', {
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });
                    
                    if (userResponse.ok) {
                        // Check content type before parsing as JSON
                        const contentType = userResponse.headers.get('content-type');
                        if (contentType && contentType.includes('application/json')) {
                            const userData = await userResponse.json();
                            
                            // Update user's saldo display with amount from the users table
                            if (userData && userData.amount !== undefined) {
                                const formattedAmount = new Intl.NumberFormat('id-ID', {
                                    style: 'currency',
                                    currency: 'IDR',
                                    minimumFractionDigits: 0
                                }).format(userData.amount);
                                
                                document.getElementById('userSaldoDisplay').textContent = formattedAmount;
                            } else {
                                document.getElementById('userSaldoDisplay').textContent = 'Rp.0';
                            }
                        } else {
                            console.error('Response is not JSON:', await userResponse.text());
                            document.getElementById('userSaldoDisplay').textContent = 'Rp.0';
                        }
                    } else {
                        console.error('Failed to fetch user data:', userResponse.status);
                        document.getElementById('userSaldoDisplay').textContent = 'Rp.0';
                    }
                } catch (error) {
                    document.getElementById('userSaldoDisplay').textContent = 'Rp.0';
                }
                
                // Fetch the receipt count from the API using the date range picker's date
                // Use moment.js for consistent date formatting across the application
                try {
                    const today = moment().utcOffset('+07:00').format('YYYY-MM-DD');
                    
                    const receiptResponse = await fetch(`/api/raku-ai/receipt-count?start=${today}&end=${today}&timezone=%2B07:00`, {
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });
                    
                    if (receiptResponse.ok) {
                        const contentType = receiptResponse.headers.get('content-type');
                        
                        if (contentType && contentType.includes('application/json')) {
                            const receiptData = await receiptResponse.json();
                            
                            // Update receipt count display - checking both possible response formats
                            if (receiptData && receiptData.receiptCount !== undefined) {
                                document.getElementById('receiptCount').textContent = receiptData.receiptCount.toString();
                            } else if (receiptData && receiptData.count !== undefined) {
                                document.getElementById('receiptCount').textContent = receiptData.count.toString();
                            } else {
                                document.getElementById('receiptCount').textContent = '0';
                            }
                        } else {
                            document.getElementById('receiptCount').textContent = '0';
                        }
                    } else {
                        document.getElementById('receiptCount').textContent = '0';
                    }
                } catch (error) {
                    console.error('Error fetching receipt count:', error);
                    document.getElementById('receiptCount').textContent = '0';
                }
                
                // Then get the Raku AI request data
                try {
                    const response = await fetch('/profile/data', {
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });

                    if (response.ok) {
                        const contentType = response.headers.get('content-type');
                        if (contentType && contentType.includes('application/json')) {
                            const data = await response.json();
                            
                            if (data.raku_ai) {
                                if (data.raku_ai.status === 'Approved') {
                                    // Change title and show approved view
                                    document.querySelector('.card-title').textContent = 'Raku AI General';
                                    document.getElementById('requestSection').classList.add('d-none');
                                    document.getElementById('mainContent').classList.remove('d-none');
                                } else {
                                    populateForm(data.raku_ai);
                                    if (data.raku_ai.status === 'Requested') {
                                        disableForm();
                                    }
                                }
                            }
                        }
                    }
                } catch (error) {
                    // Silent error handling
                }
            } catch (error) {
                console.error('Error checking existing request:', error);
            }
        }

        // Call checkExistingRequest when Firebase auth state changes
        firebase.auth().onAuthStateChanged((user) => {
            if (user) {
                checkExistingRequest();
            }
        });

        // Form validation and submission
        document.getElementById('rakuAiRequestForm').addEventListener('submit', async function(event) {
            event.preventDefault();
            
            if (!this.checkValidity()) {
                event.stopPropagation();
                this.classList.add('was-validated');
                return;
            }

            try {
                // Get the current user's Firebase token
                const user = firebase.auth().currentUser;
                if (!user) {
                    alert('Silakan login terlebih dahulu.');
                    return;
                }

                const token = await user.getIdToken(true);

                // Collect form data - ensure application_type and user_agreement are properly included
                const formData = {
                    business_type: document.getElementById('businessType').value,
                    application_type: document.getElementById('applicationType').value, // This is the field for "Aplikasi apa yang Anda miliki?"
                    app_name: document.getElementById('appName').value,
                    app_description: document.getElementById('appDescription').value,
                    platform: document.querySelector('input[name="platform"]:checked').value,
                    app_link: document.getElementById('appLink').value,
                    features: {
                        receipt: {
                            selected: document.getElementById('receiptCheck').checked,
                            implementation_plan: document.getElementById('receiptCheck').checked ? 
                                document.querySelector('#receiptPlan textarea').value : ''
                        },
                        marketing_promotion: {
                            selected: document.getElementById('marketingCheck').checked,
                            implementation_plan: document.getElementById('marketingCheck').checked ? 
                                document.querySelector('#marketingPlan textarea').value : ''
                        },
                        product_service: {
                            selected: document.getElementById('productCheck').checked,
                            implementation_plan: document.getElementById('productCheck').checked ? 
                                document.querySelector('#productPlan textarea').value : ''
                        },
                        order_reservation: {
                            selected: document.getElementById('orderCheck').checked,
                            implementation_plan: document.getElementById('orderCheck').checked ? 
                                document.querySelector('#orderPlan textarea').value : ''
                        }
                    },
                    status: 'Requested',
                    requested_at: new Date().toISOString(),
                    user_agreement: document.getElementById('agreeTerms').checked // Explicitly capture checkbox state
                };

                // Send the request to the server
                const response = await fetch('/profile/raku-ai-request', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(formData)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to submit request');
                }

                const result = await response.json();
                
                // Show success message and disable form
                alert('Permintaan Anda telah berhasil dikirim dan sedang dalam proses review.');
                populateForm({ ...formData, status: 'Requested' });
            } catch (error) {
                alert(`Terjadi kesalahan saat mengirim permintaan: ${error.message}`);
            }
        });

        // Add feature checkbox handlers
        document.querySelectorAll('input[name="features"]').forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                const planId = this.id.replace('Check', 'Plan');
                const planElement = document.getElementById(planId);
                planElement.style.display = this.checked ? 'block' : 'none';
                
                // Make textarea required if checkbox is checked
                const textarea = planElement.querySelector('textarea');
                if (textarea) {
                    textarea.required = this.checked;
                }
            });
        });

        // Function to format date in dd-MMM-yy hh:mm:ss format
        function formatDateTime(dateString) {
            if (!dateString) return '-';
            const date = new Date(dateString);
            const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            
            const day = date.getDate().toString().padStart(2, '0');
            const month = months[date.getMonth()];
            const year = date.getFullYear().toString().slice(-2);
            const hours = date.getHours().toString().padStart(2, '0');
            const minutes = date.getMinutes().toString().padStart(2, '0');
            const seconds = date.getSeconds().toString().padStart(2, '0');
            
            return `${day}-${month}-${year} ${hours}:${minutes}:${seconds}`;
        }

        // Function to load API keys
        async function loadApiKeys() {
            try {
                const user = firebase.auth().currentUser;
                if (!user) {
                    return;
                }

                const token = await user.getIdToken();
                
                const response = await fetch('/profile/api-keys', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Accept': 'application/json'
                    }
                });

                if (response.ok) {
                    const data = await response.json();
                    
                    // Generate API key list
                    if (!data || !data.apiKeys || !Array.isArray(data.apiKeys)) {
                        return;
                    }

                    const tbody = document.querySelector('#apiKeysTable tbody');
                    tbody.innerHTML = '';

                    data.apiKeys.forEach(key => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${key.name}</td>
                            <td>${key.key.substring(0, 12)}...</td>
                            <td>${formatDateTime(key.created_at)}</td>
                            <td>${formatDateTime(key.last_used)}</td>
                            <td>${user.displayName || user.email}</td>
                            <td>
                                <span class="badge ${key.status === 'active' ? 'bg-success' : 'bg-danger'}">${key.status}</span>
                            </td>
                            <td>
                                <div class="btn-group">
                                    <button class="btn btn-sm btn-outline-secondary" onclick="copyToClipboard('${key.key}')" ${key.status === 'disabled' ? 'disabled' : ''}>
                                        <i class="bi bi-clipboard"></i>
                                    </button>
                                    <button class="btn btn-sm ${key.status === 'active' ? 'btn-outline-danger' : 'btn-outline-secondary'}" 
                                            onclick="disableApiKey('${key.id}')"
                                            ${key.status === 'disabled' ? 'disabled' : ''}>
                                        <i class="bi bi-power"></i>
                                    </button>
                                </div>
                            </td>
                        `;
                        tbody.appendChild(row);
                    });
                } else {
                    console.error('API Error Response:', await response.text());
                }
            } catch (error) {
                console.error('Error loading API keys:', error);
                // Show error message in the table
                const tbody = document.querySelector('#apiKeysTable tbody');
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center text-danger">
                            <div class="alert alert-danger mb-0">
                                Failed to load API keys: ${error.message}
                            </div>
                        </td>
                    </tr>
                `;
            }
        }

        // Function to create new API key
        document.getElementById('createApiKeyBtn').addEventListener('click', async function() {
            const nameInput = document.getElementById('apiKeyName');
            const name = nameInput.value.trim();
            const createBtn = this;
            const createModal = bootstrap.Modal.getInstance(document.getElementById('createApiKeyModal'));

            if (!name) {
                nameInput.classList.add('is-invalid');
                return;
            }

            try {
                // Disable the button and show loading state
                createBtn.disabled = true;
                createBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Creating...';

                const user = firebase.auth().currentUser;
                if (!user) throw new Error('Please log in to create an API key');

                const token = await user.getIdToken();
                const response = await fetch('/profile/api-keys', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({ name })
                });

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.error || 'Failed to create API key');
                }

                if (!data.success) {
                    throw new Error(data.error || 'Failed to create API key');
                }
                
                // Show the success modal with the new key
                document.getElementById('newApiKey').value = data.apiKey.key;
                
                // Hide the create modal and show the success modal
                createModal.hide();
                
                const successModal = new bootstrap.Modal(document.getElementById('apiKeyCreatedModal'));
                successModal.show();

                // Reset the form
                nameInput.value = '';
                nameInput.classList.remove('is-invalid');
                
                // Reload the API keys table
                loadApiKeys();
            } catch (error) {
                console.error('Error creating API key:', error);
                // Show error message in the modal
                const errorDiv = document.createElement('div');
                errorDiv.className = 'alert alert-danger mt-3';
                errorDiv.textContent = error.message;
                
                // Remove any existing error messages
                const existingError = document.querySelector('#createApiKeyForm .alert');
                if (existingError) {
                    existingError.remove();
                }
                
                document.getElementById('createApiKeyForm').appendChild(errorDiv);
            } finally {
                // Reset button state
                createBtn.disabled = false;
                createBtn.innerHTML = 'Create';
            }
        });

        // Add input validation for API key name
        document.getElementById('apiKeyName').addEventListener('input', function() {
            this.classList.remove('is-invalid');
            const errorMessage = document.querySelector('#createApiKeyForm .alert');
            if (errorMessage) {
                errorMessage.remove();
            }
        });

        // Function to copy API key to clipboard
        function copyApiKey() {
            const keyInput = document.getElementById('newApiKey');
            keyInput.select();
            document.execCommand('copy');
            alert('API key copied to clipboard!');
        }

        // Function to copy any text to clipboard
        function copyToClipboard(text) {
            navigator.clipboard.writeText(text).then(() => {
                alert('Copied to clipboard!');
            }).catch(err => {
                console.error('Failed to copy:', err);
            });
        }

        // Add the disable API key function
        async function disableApiKey(keyId) {
            try {
                const user = firebase.auth().currentUser;
                if (!user) throw new Error('Please log in to disable the API key');

                if (!confirm('Are you sure you want to disable this API key? This action cannot be undone.')) {
                    return;
                }

                const token = await user.getIdToken();
                const response = await fetch(`/profile/api-keys/${keyId}/disable`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();
                if (!response.ok) {
                    throw new Error(data.error || 'Failed to disable API key');
                }

                // Reload the API keys table
                loadApiKeys();
                
                // Show success message
                alert('API key disabled successfully');
            } catch (error) {
                console.error('Error disabling API key:', error);
                alert(`Failed to disable API key: ${error.message}`);
            }
        }

        // Load API keys when the page loads
        document.addEventListener('DOMContentLoaded', loadApiKeys);
        firebase.auth().onAuthStateChanged((user) => {
            if (user) {
                loadApiKeys();
            }
        });

        // Initialize date range picker for Status section
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize date range picker
            try {
                // Store jQuery in a local variable to ensure it's available
                const $ = jQuery;
                
                if ($ && $.fn && $.fn.daterangepicker) {
                    $('#statusDateRangePicker').daterangepicker({
                        opens: 'left',
                        maxDate: new Date(),
                        autoApply: false,
                        showDropdowns: true,
                        alwaysShowCalendars: true,
                        ranges: {
                           'Today': [moment().utcOffset('+07:00'), moment().utcOffset('+07:00')],
                           'Yesterday': [moment().utcOffset('+07:00').subtract(1, 'days'), moment().utcOffset('+07:00').subtract(1, 'days')],
                           'Last 7 Days': [moment().utcOffset('+07:00').subtract(6, 'days'), moment().utcOffset('+07:00')],
                           'Last 30 Days': [moment().utcOffset('+07:00').subtract(29, 'days'), moment().utcOffset('+07:00')],
                           'This Month': [moment().utcOffset('+07:00').startOf('month'), moment().utcOffset('+07:00').endOf('month')],
                           'Last Month': [moment().utcOffset('+07:00').subtract(1, 'month').startOf('month'), moment().utcOffset('+07:00').subtract(1, 'month').endOf('month')]
                        },
                        startDate: moment().utcOffset('+07:00'),
                        endDate: moment().utcOffset('+07:00'),
                        locale: {
                            format: 'DD MMM YYYY',
                            separator: ' - ',
                            applyLabel: 'Apply',
                            cancelLabel: 'Cancel',
                            fromLabel: 'From',
                            toLabel: 'To',
                            customRangeLabel: 'Custom Range',
                            weekLabel: 'W',
                            daysOfWeek: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
                            monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                            firstDay: 1
                        }
                    });

                    // Set initial value in input
                    const startDate = moment().format('DD MMM YYYY');
                    const endDate = moment().format('DD MMM YYYY');
                    $('#statusDateRangePicker').val(`${startDate} - ${endDate}`);
                    
                    // Call updateStatistics immediately with today's date to make sure the count is in sync
                    updateStatistics(moment().format('YYYY-MM-DD'), moment().format('YYYY-MM-DD'));
                    
                    // Event handler when date range is applied
                    $('#statusDateRangePicker').on('apply.daterangepicker', function(ev, picker) {
                        $(this).val(picker.startDate.format('DD MMM YYYY') + ' - ' + picker.endDate.format('DD MMM YYYY'));
                        
                        // Update statistics based on date range
                        updateStatistics(picker.startDate.format('YYYY-MM-DD'), picker.endDate.format('YYYY-MM-DD'));
                    });
                } else {
                    console.error('daterangepicker plugin not available for status section');
                    document.getElementById('statusDateRangePicker').disabled = true;
                    document.getElementById('statusDateRangePicker').placeholder = 'Date range unavailable';
                }
            } catch (error) {
                console.error('Status date range picker initialization error:', error);
            }
        });

        // Function to update statistics based on date range
        async function updateStatistics(startDate, endDate) {
            try {
                const user = firebase.auth().currentUser;
                if (!user) return;

                const token = await user.getIdToken();
                
                // Update the receipt count based on the date range - FIX: ensure proper +07:00 format with no spaces
                const receiptResponse = await fetch(`/api/raku-ai/receipt-count?start=${startDate}&end=${endDate}&timezone=%2B07:00`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                if (receiptResponse.ok) {
                    const contentType = receiptResponse.headers.get('content-type');
                    
                    if (contentType && contentType.includes('application/json')) {
                        const receiptData = await receiptResponse.json();
                        
                        // Update receipt count display - checking both possible response formats
                        if (receiptData && receiptData.receiptCount !== undefined) {
                            document.getElementById('receiptCount').textContent = receiptData.receiptCount.toString();
                        } else if (receiptData && receiptData.count !== undefined) {
                            document.getElementById('receiptCount').textContent = receiptData.count.toString();
                        } else {
                            document.getElementById('receiptCount').textContent = '0';
                        }
                    } else {
                        document.getElementById('receiptCount').textContent = '0';
                    }
                } else {
                    document.getElementById('receiptCount').textContent = '0';
                }
            } catch (error) {
                console.error('Error updating statistics:', error);
                document.getElementById('receiptCount').textContent = '0';
            }
        }
    </script>
</body>
</html> 